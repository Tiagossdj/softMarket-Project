    -- Banco de Dados para Teste de API
    -- Criação do tipo enum para a role
    -- CREATE TYPE role_enum AS ENUM ('gerente', 'funcionario');

    -- Criação da tabela com a role como enum
    CREATE TABLE usuarios (
        id SERIAL PRIMARY KEY,
        username VARCHAR(80) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        role role_enum NOT NULL DEFAULT 'funcionario'
    );

    CREATE TABLE IF NOT EXISTS fornecedor (
        id SERIAL PRIMARY KEY,
        nome VARCHAR(100) NOT NULL,
        cnpj VARCHAR(14) NOT NULL UNIQUE,
        contato VARCHAR(100) NOT NULL
    );

    CREATE TABLE IF NOT EXISTS produto (
        id SERIAL PRIMARY KEY,
        nome VARCHAR(100) NOT NULL,
        preco FLOAT NOT NULL,
        quantidade_em_estoque INT NOT NULL,
        estoque_minimo INT NOT NULL, 
        fornecedor_id INT NOT NULL,
        CONSTRAINT fk_fornecedor FOREIGN KEY (fornecedor_id) REFERENCES fornecedor(id)
    );

    -- TABELA CLIENTE REMOVIDA

    CREATE TABLE IF NOT EXISTS compra (
        id SERIAL PRIMARY KEY,
        data TIMESTAMP NOT NULL,
        total FLOAT NOT NULL,
        forma_pagamento varchar(50)
    );

    CREATE TABLE IF NOT EXISTS pedido_estoque (
        id SERIAL PRIMARY KEY,
        produto_id INT NOT NULL,
        quantidade INT NOT NULL,
        fornecedor_id INT NOT NULL,
        data_pedido date not null,
        CONSTRAINT fk_produto FOREIGN KEY (produto_id) REFERENCES produto(id),
        CONSTRAINT fk_fornecedor_pedido FOREIGN KEY (fornecedor_id) REFERENCES fornecedor(id)
    );

    CREATE TABLE IF NOT EXISTS item_compra (
        id SERIAL PRIMARY KEY,
        compra_id INT,
        produto_id INT NOT NULL,
        quantidade INT NOT NULL,
        preco_unitario FLOAT NOT NULL,
        subtotal FLOAT NOT NULL,
        CONSTRAINT fk_compra FOREIGN KEY (compra_id) REFERENCES compra(id),
        CONSTRAINT fk_produto_item FOREIGN KEY (produto_id) REFERENCES produto(id)
    );

--------------------------------------------------------------------------------

Popular Banco de Dados (Para os testes)

-- Inserindo fornecedores
INSERT INTO fornecedor (nome, cnpj, contato) VALUES 
('Fornecedor A', '12345678000199', 'contato@fornecedora.com'),
('Fornecedor B', '98765432000188', 'suporte@fornecedorb.com');

-- Inserindo produtos
INSERT INTO produto (nome, preco, quantidade_em_estoque, fornecedor_id, estoque_minimo) VALUES 
('Arroz', 10.99, 100, 1, 30),
('Feijão', 8.99, 200, 2, 30),
('Macarrão', 4.99, 15, 1, 30),
('Óleo de Soja', 6.49, 50, 2, 30),
('Açúcar', 3.99, 120, 1, 30);

-- Inserindo pedidos de estoque
INSERT INTO pedido_estoque (produto_id, quantidade, fornecedor_id, data_pedido) VALUES 
(1, 50, 1, '2025-03-19 08:30:00'),
(2, 100, 2, '2025-03-19 09:00:00'),
(3, 75, 1, '2025-03-19 10:15:00'),
(4, 30, 2, '2025-03-19 11:00:00'),
(5, 60, 1, '2025-03-19 12:30:00');


INSERT INTO compra (data, total, forma_pagamento)
VALUES 
    ('2025-03-21 08:30:00', 150.75, 'pix'),
    ('2025-03-21 09:00:00', 320.50, 'cartão de débito'),
    ('2025-03-21 09:15:00', 45.99, 'dinheiro'),
    ('2025-03-21 10:00:00', 210.30, 'cartão de crédito'),
    ('2025-03-22 11:30:00', 78.00, 'pix'),
    ('2025-03-23 12:00:00', 56.20, 'cartão de débito'),
    ('2025-03-24 14:30:00', 123.45, 'dinheiro'),
    ('2025-03-25 16:00:00', 190.10, 'cartão de crédito'),
    ('2025-03-25 17:15:00', 110.99, 'pix'),
    ('2025-03-26 18:30:00', 300.00, 'cartão de débito');

-- Inserindo itens de compra
INSERT INTO item_compra (compra_id, produto_id, quantidade, preco_unitario, subtotal)
VALUES 
    -- Para a compra de ID 1 (compra feita com PIX em 2025-03-21)
    (1, 1, 2, 50.00, 100.00),  -- Produto 1, quantidade 2, preço unitário 50
    (1, 3, 1, 50.75, 50.75),  -- Produto 3, quantidade 1, preço unitário 50.75

    -- Para a compra de ID 2 (compra feita com cartão de débito em 2025-03-21)
    (2, 2, 3, 80.00, 240.00),  -- Produto 2, quantidade 3, preço unitário 80
    (2, 4, 1, 80.50, 80.50),  -- Produto 4, quantidade 1, preço unitário 80.50

    -- Para a compra de ID 3 (compra feita com dinheiro em 2025-03-21)
    (3, 1, 1, 45.99, 45.99),  -- Produto 1, quantidade 1, preço unitário 45.99

    -- Para a compra de ID 4 (compra feita com cartão de crédito em 2025-03-21)
    (4, 3, 2, 55.15, 110.30),  -- Produto 3, quantidade 2, preço unitário 55.15

    -- Para a compra de ID 5 (compra feita com PIX em 2025-03-22)
    (5, 2, 5, 78.00, 390.00),  -- Produto 2, quantidade 5, preço unitário 78.00

    -- Para a compra de ID 6 (compra feita com cartão de débito em 2025-03-23)
    (6, 4, 1, 56.20, 56.20),  -- Produto 4, quantidade 1, preço unitário 56.20

    -- Para a compra de ID 7 (compra feita com dinheiro em 2025-03-24)
    (7, 1, 4, 30.00, 120.00),  -- Produto 1, quantidade 4, preço unitário 30.00

    -- Para a compra de ID 8 (compra feita com cartão de crédito em 2025-03-25)
    (8, 2, 2, 95.05, 190.10),  -- Produto 2, quantidade 2, preço unitário 95.05

    -- Para a compra de ID 9 (compra feita com PIX em 2025-03-25)
    (9, 3, 1, 110.99, 110.99),  -- Produto 3, quantidade 1, preço unitário 110.99

    -- Para a compra de ID 10 (compra feita com cartão de débito em 2025-03-26)
    (10, 4, 3, 100.00, 300.00);  -- Produto 4, quantidade 3, preço unitário 100.00

------------------------------------------------------------------------------------

-- Para caso precise resetar os ID's
-- Resetando a sequência do campo SERIAL para a tabela produto
SELECT setval('produto_id_seq', (SELECT MAX(id) FROM produto));

-- Resetando a sequência do campo SERIAL para a tabela fornecedor
SELECT setval('fornecedor_id_seq', (SELECT MAX(id) FROM fornecedor));

-- Resetando a sequência do campo SERIAL para a tabela pedido_estoque
SELECT setval('pedido_estoque_id_seq', (SELECT MAX(id) FROM pedido_estoque));

-- Resetando a sequência do campo SERIAL para a tabela compra
SELECT setval('compra_id_seq', (SELECT MAX(id) FROM compra));

-- Resetando a sequência do campo SERIAL para a tabela item_compra
SELECT setval('item_compra_id_seq', (SELECT MAX(id) FROM item_compra));